import { HashSet } from 'effect'
{{#moduleNames}}
import * as {{@key}} from './{{.}}.js'
{{/moduleNames}}

export type SupportedLocale = {{#locales}}| '{{.}}'{{/locales}}

export type UserSelectableLocale = Exclude<SupportedLocale, '{{crowdinInContextLocale}}'>

export const DefaultLocale: UserSelectableLocale = '{{defaultLocale}}'

export const CrowdinInContextLocale: SupportedLocale = '{{crowdinInContextLocale}}'

export const SupportedLocales = HashSet.fromIterable<SupportedLocale>([{{#locales}}'{{.}}', {{/locales}}])

export const UserSelectableLocales = HashSet.fromIterable<SupportedLocale>([{{#locales}}'{{.}}', {{/locales}}]).pipe(HashSet.remove<SupportedLocale>('{{crowdinInContextLocale}}')) as HashSet.HashSet<UserSelectableLocale>

export const isSupportedLocale = (locale: string): locale is SupportedLocale =>
  [{{#locales}}'{{.}}', {{/locales}}].includes(locale)

export const isUserSelectableLocales = (locale: string): locale is UserSelectableLocale =>
  isSupportedLocale(locale) && locale !== '{{crowdinInContextLocale}}'

type Module = keyof Translations
type Key<M extends Module> = keyof Translations[M]

const modules = {
{{#moduleNames}}
  '{{.}}': {{@key}}.translate{{@key}},
{{/moduleNames}}
}

type Translations = {
{{#moduleNames}}
  '{{.}}': {{@key}}.Translations,
{{/moduleNames}}
}

export const translate: {
  (locale: SupportedLocale): <M extends Module, K extends Key<M>>(module: M, key: K) => Translations[M][K] 
  <M extends Module>(locale: SupportedLocale, module: M): <K extends Key<M>>(key: K) => Translations[M][K]
  <M extends Module, K extends Key<M>>(locale: SupportedLocale, module: M, key: K): Translations[M][K] 
} =
  (locale: SupportedLocale, module?: string, key?: string) => {
    if(!module) {
      // @ts-ignore
      return (module: string | number, key: any) => modules[module](locale)(key)
    }

    if(!key) {
      // @ts-ignore
      return (key: string) => modules[module](locale)(key)
    }

    // @ts-ignore
    return modules[module](locale)(key)
  }
 