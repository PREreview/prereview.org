{{#moduleNames}}
import * as {{@key}} from './{{.}}.js'
{{/moduleNames}}

export type SupportedLocale = {{#locales}}| '{{.}}'{{/locales}}

export const DefaultLocale: SupportedLocale = '{{defaultLocale}}'

export const isSupportedLocale = (locale: string): locale is SupportedLocale =>
  [{{#locales}}'{{.}}', {{/locales}}].includes(locale)

type Module = keyof Translations
type Key<M extends Module> = keyof Translations[M]

const modules = {
{{#moduleNames}}
  '{{.}}': {{@key}}.translate{{@key}},
{{/moduleNames}}
}

type Translations = {
{{#moduleNames}}
  '{{.}}': {{@key}}.Translations,
{{/moduleNames}}
}

export const translate =
  <M extends Module, K extends Key<M>>(locale: SupportedLocale, module: M, key: K): Translations[M][K] => {
    // @ts-ignore
    return modules[module](locale)(key)
  }

export const localeTranslate = (locale: SupportedLocale) => <M extends Module, K extends Key<M>>(module: M, key: K): Translations[M][K] => {
    // @ts-ignore
    return modules[module](locale)(key)
  }

export type LocaleTranslate = ReturnType<typeof localeTranslate>
