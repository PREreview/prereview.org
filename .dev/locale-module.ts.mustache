import type { Types } from 'effect'
{{#locales}}
  import * as l{{@key}} from './{{module}}/{{.}}.js'
{{/locales}}

const translations = {
{{#locales}}
  '{{.}}': l{{@key}},
{{/locales}}
}

type SupportedLocale = keyof typeof translations

export type Translations = {[K in keyof typeof translations['{{defaultLocale}}']]: Types.UnionToIntersection<[]
{{#realLocales}}
  & Parameters<typeof translations['{{.}}'][K]>
{{/realLocales}}
> extends [] ? () => string : (x: Types.Simplify<{}
{{#realLocales}}
  & (Parameters<typeof translations['{{.}}'][K]> extends [] ? {} : Parameters<typeof translations['{{.}}'][K]>[0])
{{/realLocales}}
>) => string
}

export const translate{{moduleName}} =
  (locale: SupportedLocale) =>
  <K extends keyof Translations>(key: K): Translations[K] => {
    if (key in translations[locale]) {
      // @ts-ignore
      return translations[locale][key]
    }
    return translations['{{defaultLocale}}'][key]
  }
