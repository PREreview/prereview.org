name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-20.04
    outputs:
      image: ${{ steps.build.outputs.imageid }}

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up Docker Build'
        uses: docker/setup-buildx-action@v2.0.0

      - name: 'Build image'
        id: build
        uses: docker/build-push-action@v3.0.0
        with:
          outputs: type=docker,dest=/tmp/image.tar

      - name: 'Upload build'
        uses: actions/upload-artifact@v3.0.0
        with:
          name: image
          path: /tmp/image.tar

  format:
    name: 'Format'
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run formatter'
        run: npm run format

  lint:
    name: 'Lint'
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run the linters'
        run: npm run lint

  test:
    name: 'Test'
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run the tests'
        run: npm run test

  test-integration:
    name: 'Integration test'
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Install browser dependencies'
        run: npx playwright install-deps

      - name: 'Install browsers'
        run: npx playwright install

      - name: 'Run Playwright'
        id: 'playwright'
        run: npm run test:integration -- --forbid-only

      - name: 'Store results'
        if: failure() && steps.playwright.outcome == 'failure'
        uses: actions/upload-artifact@v3.0.0
        with:
          name: integration-tests-results
          path: integration-results

  test-smoke:
    name: 'Smoke test'
    runs-on: ubuntu-20.04
    needs:
      - build

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Download image'
        uses: actions/download-artifact@v3.0.0
        with:
          name: image
          path: /tmp

      - name: 'Load image'
        run: docker load --input /tmp/image.tar

      - name: 'Run smoke test'
        run: scripts/smoke-test.sh ${{ needs.build.outputs.image }}

  typecheck:
    name: 'Typecheck'
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run typechecker'
        run: npm run typecheck

  push:
    name: 'Push image'
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.image.outputs.image }}
    needs:
      - build
      - format
      - lint
      - test
      - test-integration
      - test-smoke
      - typecheck

    steps:
      - name: 'Set up flyctl'
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: 'Log in to the registry'
        run: flyctl auth docker
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 'Download image'
        uses: actions/download-artifact@v3.0.0
        with:
          name: image
          path: /tmp

      - name: 'Load image'
        run: docker load --input /tmp/image.tar

      - name: 'Generate image name'
        id: image
        run: echo "::set-output name=image::registry.fly.io/prereview:${{ github.sha }}"

      - name: 'Tag image'
        run: docker tag ${{ needs.build.outputs.image }} ${{ steps.image.outputs.image }}

      - name: 'Push image'
        run: docker push ${{ steps.image.outputs.image }}

  deploy:
    name: 'Deploy'
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    needs:
      - push

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up flyctl'
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: 'Deploy app'
        run: flyctl deploy --image ${{ needs.push.outputs.image }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
