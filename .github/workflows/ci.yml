name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:
  dockerfile:
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Lint Dockerfile'
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile

  format:
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run formatter'
        run: npm run format

  lint:
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run the linters'
        run: npm run lint

  test:
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run the tests'
        run: npm run test

  test-integration:
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Install browser dependencies'
        run: npx playwright install-deps

      - name: 'Install browsers'
        run: npx playwright install

      - name: 'Run Playwright'
        id: 'playwright'
        run: npm run test:integration -- --forbid-only

      - name: 'Store results'
        if: failure() && steps.playwright.outcome == 'failure'
        uses: actions/upload-artifact@v3.0.0
        with:
          name: integration-tests-results
          path: integration-results

  typecheck:
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 16
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run typechecker'
        run: npm run typecheck

  deploy:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    needs:
      - dockerfile
      - format
      - lint
      - test-integration
      - typecheck

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.0.2

      - name: 'Set up flyctl'
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: 'Deploy app'
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
