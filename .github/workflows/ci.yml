name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:
  build-assets:
    name: 'Build assets'
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.2.0

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.5.1
        with:
          node-version-file: package.json
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Set up assets cache'
        uses: actions/cache@v3.2.2
        if: ${{ !env.ACT }}
        with:
          path: .webpack
          key: webpack-${{ github.head_ref || github.ref_name }}
          restore-keys: webpack-

      - name: 'Build assets'
        run: npm run build:assets

      - name: 'Upload manifest'
        uses: actions/upload-artifact@v3.1.1
        with:
          name: manifest
          path: src/manifest.json

  build-image:
    name: 'Build image'
    runs-on: ubuntu-20.04
    outputs:
      image: ${{ steps.build.outputs.imageid }}

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.2.0

      - name: 'Set up Docker Build'
        uses: docker/setup-buildx-action@v2.2.1

      - name: 'Build image'
        id: build
        uses: docker/build-push-action@v3.2.0
        with:
          outputs: type=docker,dest=/tmp/image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Upload build'
        uses: actions/upload-artifact@v3.1.1
        with:
          name: image
          path: /tmp/image.tar

  format:
    name: 'Format'
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.2.0

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.5.1
        with:
          node-version-file: package.json
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run formatter'
        run: npm run format

  lint:
    name: 'Lint'
    runs-on: ubuntu-20.04
    needs:
      - build-assets

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.2.0

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.5.1
        with:
          node-version-file: package.json
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Download assets manifest'
        uses: actions/download-artifact@v3.0.1
        with:
          name: manifest
          path: src

      - name: 'Run the linters'
        run: npm run lint

  test:
    name: 'Test'
    runs-on: ubuntu-20.04
    needs:
      - build-assets

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.2.0

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.5.1
        with:
          node-version-file: package.json
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Download assets manifest'
        uses: actions/download-artifact@v3.0.1
        with:
          name: manifest
          path: src

      - name: 'Run the tests'
        run: npm run test

  test-integration:
    name: 'Integration test (${{ matrix.shard }}/${{ strategy.job-total }})'
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]

    steps:
      - name: 'Checkout code'
        uses: nschloe/action-cached-lfs-checkout@v1.2.0

      - name: 'Set up Docker Build'
        uses: docker/setup-buildx-action@v2.2.1

      - name: 'Build image'
        id: build
        uses: docker/build-push-action@v3.2.0
        with:
          load: true
          target: test-integration
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Run Playwright'
        id: 'playwright'
        run: npm run test:integration -- ${{ steps.build.outputs.imageid }} --forbid-only --shard=${{ matrix.shard }}/${{ strategy.job-total }}

      - name: 'Store results'
        if: failure() && steps.playwright.outcome == 'failure'
        uses: actions/upload-artifact@v3.1.1
        with:
          name: integration-tests-results-${{ matrix.shard }}
          path: integration-results

  test-smoke:
    name: 'Smoke test'
    runs-on: ubuntu-20.04
    needs:
      - build-image

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.2.0

      - name: 'Download image'
        uses: actions/download-artifact@v3.0.1
        with:
          name: image
          path: /tmp

      - name: 'Load image'
        run: docker load --input /tmp/image.tar

      - name: 'Run smoke test'
        run: scripts/smoke-test.sh ${{ needs.build-image.outputs.image }}

  typecheck:
    name: 'Typecheck'
    runs-on: ubuntu-20.04
    needs:
      - build-assets

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.2.0

      - name: 'Set up Node.js'
        uses: actions/setup-node@v3.5.1
        with:
          node-version-file: package.json
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Download assets manifest'
        uses: actions/download-artifact@v3.0.1
        with:
          name: manifest
          path: src

      - name: 'Run typechecker'
        run: npm run typecheck

  push:
    name: 'Push image'
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.image.outputs.image }}
    needs:
      - build-image
      - format
      - lint
      - test
      - test-integration
      - test-smoke
      - typecheck

    steps:
      - name: 'Set up flyctl'
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: 'Log in to the registry'
        run: flyctl auth docker
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 'Download image'
        uses: actions/download-artifact@v3.0.1
        with:
          name: image
          path: /tmp

      - name: 'Load image'
        run: docker load --input /tmp/image.tar

      - name: 'Generate image name'
        id: image
        run: echo "image=registry.fly.io/prereview:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: 'Tag image'
        run: docker tag ${{ needs.build-image.outputs.image }} ${{ steps.image.outputs.image }}

      - name: 'Push image'
        run: docker push ${{ steps.image.outputs.image }}

  deploy:
    name: 'Deploy (${{ matrix.instance }})'
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    needs:
      - push
    strategy:
      fail-fast: false
      matrix:
        instance: ['prod', 'sandbox']

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3.2.0

      - name: 'Set up flyctl'
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: 'Deploy app'
        run: flyctl deploy --config fly.${{ matrix.instance }}.toml --image ${{ needs.push.outputs.image }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
